from datetime import datetime

from mongoengine import *

from .GradingCategory import GradingCategory


class TermGrade(EmbeddedDocument):
    """
    Class to store the grades of a student in one course.
    :params:
        - student_id: The student's id.
        - course_id: The course's id.
        - grades: The grades of the student in the course. Is expected to be a dictionary in the format:
            {assignment_id:
            fo[grade, weight]} OR {grades_id} to Nest
        Default: {}
    :autogenerated attributes:
        - grades_list: A list of the student's grades with the weight taken into account.
        - average: The average of the student's grades.
        - median: The median of the student's grades.
        - mode: The mode of the student's grades.
        - range: The range of the student's grades.
        - grade_frequency: A dictionary with the frequency of each grade.
    """

    course = ReferenceField("Course")
    title = StringField(default=None)
    start_date = DateTimeField(default=datetime.max)
    end_date = DateTimeField(default=datetime.max)
    grading_categories = ListField(EmbeddedDocumentField("GradingCategory"))
    grade = FloatField(required=False)

    def clean(self):
        self.grade = 0

        if not self.grading_categories:
            default_category = GradingCategory(course=self.course)
            self.grading_categories = [default_category]

            for assignment in self.course.assignments:
                assignment.grading_category = default_category

        for category in self.grading_categories:
            if not category.course:
                category.course = self.course

            if not category.grade:
                category.clean()

            if category.weight:
                self.grade += category.grade * category.weight
            else:
                self.grade += category.grade

    def __str__(self):
        return f'TermGrade(title="{self.title}", grade={self.grade})'

    def __hash__(self):
        return hash(" ".join(map(str, self._fields_ordered)))
