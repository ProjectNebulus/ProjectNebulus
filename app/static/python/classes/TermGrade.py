from Grades import *


class TermGrade(EmbeddedDocument):
    """
    Class to store the grades of a student in one course.
    :params:
        - student_id: The student's id.
        - course_id: The course's id.
        - grades: The grades of the student in the course. Is expected to be a dictionary in the format:
            {assignment_id: [grade, weight]} OR {grades_id} to Nest
        Default: {}
    :autogenerated attributes:
        - grades_list: A list of the student's grades with the weight taken into account.
        - average: The average of the student's grades.
        - median: The median of the student's grades.
        - mode: The mode of the student's grades.
        - range: The range of the student's grades.
        - grade_frequency: A dictionary with the frequency of each grade.
    """

    average = FloatField(required=False)
    median = FloatField(required=False)
    mode = FloatField(required=False)
    range = FloatField(required=False)
    grade_frequency = DictField(required=False)

    def clean(self):
        grades_list = list(self.grades.values())
        self.average = float(get_average(grades_list))
        self.median = float(get_median(grades_list))
        self.mode = float(get_mode(grades_list))
        self.range = float(get_range(grades_list))
        self.grade_frequency = get_grade_frequency(grades_list)
